# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Assign sheet to user input"""
input AssignSheetToUserInput {
  advanceDirectives: Boolean
  allergies: String
  bloodType: String
  currentTreatment: String
  dateOfBirth: DateTime
  emergencyContacts: [SheetContactInput]
  enabled: Boolean
  fname: String
  id: String
  lname: String
  medicalHistory: String
  nationality: String
  organDonor: Boolean
  sex: String
  smoker: Boolean
  treatingDoctor: SheetDoctorContactInput
}

"""Boolean response"""
type BooleanResponse {
  error: ExtendedError
  response: Boolean
}

"""Change password input"""
input ChangePasswordInput {
  password: String
  token: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

"""Error with message and the associated field"""
type ExtendedError {
  code: Float
  fields: [InputError]
  message: String
  retryAfter: Float
  timestamp: String
  title: String
  type: String
  wwwAuthenticate: String
}

interface IPaginationDetails {
  currentPage: Int
  hasMore: Boolean
  totalItems: Int
  totalPages: Int
}

"""Error with message"""
type InputError {
  detail: String
  name: String
  type: String
}

"""Login input"""
input LoginInput {
  email: String
  password: String
}

"""Login response"""
type LoginResponse {
  error: ExtendedError
  response: LoginResponseData
}

"""Login response data"""
type LoginResponseData {
  accessToken: String
  user: User
}

"""Login with Google input"""
input LoginWithGoogleInput {
  token: String
  tokenId: String
}

type Mutation {
  """Assign an unassigned sheet to the current user."""
  assignSheetToUser(assignSheetToUserInput: AssignSheetToUserInput): SheetResponse

  """
  Change the password of a specific user. It implies that the user has already made a modification request, as a token has to be generated to retrieve the user id.
  """
  changePassword(changePasswordInput: ChangePasswordInput): UserResponse

  """
  Confirm and validate a user. Validation is based on the existence of the email address used during the registration process.
  """
  confirmUser(token: String): BooleanResponse

  """Create an empty sheet."""
  createSheet(count: Float): SheetsResponse

  """
  Send an email containing a link that redirect to change password dedicated route on the frontend. The link contains a token that, once decoded, will reveal the user id.
  """
  forgotPassword(userEmail: String): BooleanResponse

  """Log the user in using his email address and his password."""
  login(loginInput: LoginInput): LoginResponse

  """Log the user in using his google account."""
  loginWithGoogle(loginInput: LoginWithGoogleInput): LoginResponse

  """
  Log the user out. He will no longer be authenticated and will not have access to restricted and private resources anymore.
  """
  logout: BooleanResponse

  """
  Register a new user. To complete the registration, the user will have to confirm his account by following the link that has been sent to him by email.
  """
  register(registerInput: RegisterInput): UserResponse

  """
  Resend an email containing a link to confirm the account of a specific user. The previous confirmation link sent to him when he registered can indeed be expired.
  """
  resendConfirmationLink(userEmail: String): BooleanResponse

  """Update the currently logged in user."""
  updateCurrentUser(updateCurrentUserInput: UpdateCurrentUserInput): UserResponse

  """Update one of the current user sheets."""
  updateCurrentUserSheet(updateCurrentUserSheetInput: UpdateCurrentUserSheetInput): SheetResponse

  """Update user."""
  updateUser(updateUserInput: UpdateUserInput): UserResponse
}

"""Sheet after paginaation was applied"""
type PaginatedSheets implements IPaginationDetails {
  currentPage: Int
  hasMore: Boolean
  items: [Sheet]
  totalItems: Int
  totalPages: Int
}

"""Paginated sheets response"""
type PaginatedSheetsResponse {
  error: ExtendedError
  response: PaginatedSheets
}

"""User after paginaation was applied"""
type PaginatedUsers implements IPaginationDetails {
  currentPage: Int
  hasMore: Boolean
  items: [User]
  totalItems: Int
  totalPages: Int
}

"""Paginated users response"""
type PaginatedUsersResponse {
  error: ExtendedError
  response: PaginatedUsers
}

type Query {
  """Get all sheets."""
  allSheets(options: QueryOptions): PaginatedSheetsResponse

  """Get all users."""
  allUsers(options: QueryOptions): PaginatedUsersResponse

  """Get the user currently logged in."""
  currentUser: UserResponse

  """Get a sheet by its id as an admin."""
  sheetById(sheetId: String): SheetResponse

  """Get an active sheet by its id."""
  sheetByScanning(sheetId: String): SheetResponse

  """Get the sheets of the specified user."""
  sheetsCurrentUser: SheetsResponse

  """Get a user by his id."""
  userById(userId: String): UserResponse

  """Return a simple welcoming message."""
  welcome: String
}

"""Filter options"""
input QueryFilterOptions {
  field: String
  value: String
}

"""Query options to apply on list"""
input QueryOptions {
  filter: QueryFilterOptions
  pagination: QueryPaginationOptions
  sort: QuerySortOptions
}

"""Pagination options"""
input QueryPaginationOptions {
  limit: Float
  page: Float
}

"""Sort options"""
input QuerySortOptions {
  field: String
  order: String
}

"""Register input"""
input RegisterInput {
  email: String
  fname: String
  lname: String
  password: String
  phone: String
}

"""Sheet Schema"""
type Sheet {
  _id: String
  advanceDirectives: Boolean
  allergies: String
  bloodType: String
  createdAt: String
  currentTreatment: String
  dateOfBirth: String
  emergencyContacts: [SheetContact]
  enabled: Boolean
  fname: String
  lname: String
  medicalHistory: String
  nationality: String
  organDonor: Boolean
  sex: String
  smoker: Boolean
  treatingDoctor: SheetDoctorContact
  updatedAt: String
  user: String
}

"""Sheet Contact Schema"""
type SheetContact {
  fname: String
  lname: String
  phone: String
  role: String
}

"""Sheet emergency contact field to be changed with an update operation"""
input SheetContactInput {
  fname: String
  lname: String
  phone: String
  role: String
}

"""Sheet Treating Doctor Contact Schema"""
type SheetDoctorContact {
  fname: String
  lname: String
  phone: String
}

"""Sheet doctor contact field to be changed with an update operation"""
input SheetDoctorContactInput {
  fname: String
  lname: String
  phone: String
}

"""Sheet response"""
type SheetResponse {
  error: ExtendedError
  response: Sheet
}

"""Sheets response"""
type SheetsResponse {
  error: ExtendedError
  response: [Sheet!]
}

"""Update currently logged in user input"""
input UpdateCurrentUserInput {
  activated: Boolean
  address: String
  city: String
  email: String
  fname: String
  lname: String
  nationality: String
  password: String
  phone: String
  zipCode: String
}

"""Sheet fields to be changed with an update operation"""
input UpdateCurrentUserSheetChangesInput {
  advanceDirectives: Boolean
  allergies: String
  bloodType: String
  currentTreatment: String
  dateOfBirth: DateTime
  emergencyContacts: [SheetContactInput]
  enabled: Boolean
  fname: String
  lname: String
  medicalHistory: String
  nationality: String
  organDonor: Boolean
  sex: String
  smoker: Boolean
  treatingDoctor: SheetDoctorContactInput
}

"""Update Sheet input"""
input UpdateCurrentUserSheetInput {
  changes: UpdateCurrentUserSheetChangesInput
  id: String
}

"""Update user input"""
input UpdateUserInput {
  activated: Boolean
  address: String
  city: String
  confirmed: Boolean
  email: String
  fname: String
  lname: String
  nationality: String
  password: String
  phone: String
  roles: [String]
  tokenVersion: Float
  zipCode: String
}

"""User Schema"""
type User {
  _id: ID
  activated: Boolean
  address: String
  city: String
  confirmed: Boolean
  createdAt: String
  email: String
  fname: String
  lname: String
  nationality: String
  password: String
  phone: String
  roles: [String]
  tokenVersion: Int
  updatedAt: String
  zipCode: String
}

"""User response"""
type UserResponse {
  error: ExtendedError
  response: User
}
